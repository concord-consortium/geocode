/**
 *     **** Block Definitions ****
 *
 * Mostly generated by https://blockly-demo.appspot.com/static/demos/blockfactory/index.html
 * and/or edited by hand
 */

Blockly.Blocks['fill_cell'] = {
  init: function() {
    this.appendValueInput("hue")
        .setCheck("Number")
        .setAlign(Blockly.ALIGN_RIGHT)
        .appendField("hue");
    this.appendValueInput("sat")
        .setCheck("Number")
        .setAlign(Blockly.ALIGN_RIGHT)
        .appendField("saturation");
    this.appendValueInput("value")
        .setCheck("Number")
        .setAlign(Blockly.ALIGN_RIGHT)
        .appendField("value");
    this.appendValueInput("alpha")
        .setCheck("Number")
        .setAlign(Blockly.ALIGN_RIGHT)
        .appendField("alpha");
    this.setPreviousStatement(true, null);
    this.setNextStatement(true, null);
    this.setColour(230);
 this.setTooltip("");
 this.setHelpUrl("");
  }
};

Blockly.JavaScript['fill_cell'] = function(block) {
  var hue = Blockly.JavaScript.valueToCode(block, 'hue', Blockly.JavaScript.ORDER_ATOMIC);
  var sat = Blockly.JavaScript.valueToCode(block, 'sat', Blockly.JavaScript.ORDER_ATOMIC);
  var value = Blockly.JavaScript.valueToCode(block, 'value', Blockly.JavaScript.ORDER_ATOMIC);
  var alpha = Blockly.JavaScript.valueToCode(block, 'alpha', Blockly.JavaScript.ORDER_ATOMIC);
  // TODO: Assemble JavaScript into code variable.
  var code = `
    this.fill && this.fill( ${hue || 1}, ${sat || 50}, ${value || 50}, ${alpha || 10 });
  `;
  return code;
}

/************************************************* */

Blockly.Blocks['run_sumilation'] = {
  init: function() {
    this.appendValueInput("mass")
        .setCheck("Number")
        .setAlign(Blockly.ALIGN_RIGHT)
        .appendField("Mass (kg)");
    this.appendValueInput("coumn_height")
        .setCheck("Number")
        .setAlign(Blockly.ALIGN_RIGHT)
        .appendField("Column Height (km)");
    this.appendValueInput("wind_speed")
        .setCheck("Number")
        .setAlign(Blockly.ALIGN_RIGHT)
        .appendField("Wind Speed (m/s)");
    this.appendValueInput("particle_size")
        .setCheck("Number")
        .setAlign(Blockly.ALIGN_RIGHT)
        .appendField("Particle Size");
    this.setPreviousStatement(true, null);
    this.setNextStatement(true, null);
    this.setColour(230);
    this.setTooltip("Simulation parameters");
    this.setHelpUrl("");
  }
}

Blockly.JavaScript['run_sumilation'] = function(block) {
  var value_mass = Blockly.JavaScript.valueToCode(block, 'mass', Blockly.JavaScript.ORDER_ATOMIC);
  var value_coumn_height = Blockly.JavaScript.valueToCode(block, 'coumn_height', Blockly.JavaScript.ORDER_ATOMIC);
  var value_wind_speed = Blockly.JavaScript.valueToCode(block, 'wind_speed', Blockly.JavaScript.ORDER_ATOMIC);
  var value_particle_size = Blockly.JavaScript.valueToCode(block, 'particle_size', Blockly.JavaScript.ORDER_ATOMIC);
  // TODO: Assemble JavaScript into code variable.
  var code = '...;\n';
  var code = `
    var mass=${value_mass};
    var modelParams = {
      mass: ${value_mass || 100},
      colHeight: ${value_coumn_height || 10},
      windSpeed: ${value_wind_speed || 0},
      particleSize: ${value_particle_size || 1}
    }
    // this.setModelParams(modelParams);
    this.setModelParams(modelParams);
  `;
  return code;
}

/************************************************* */
Blockly.Blocks['thickness'] = {
  init: function() {
    this.appendDummyInput()
        .appendField("tephra thickness");
    this.setOutput(true, null);
    this.setColour(230);
 this.setTooltip("");
 this.setHelpUrl("");
  }
};


Blockly.JavaScript['thickness'] = function(block) {
  // TODO: Assemble JavaScript into code variable.
  var code = `(this.thickness)`;
  // TODO: Change ORDER_NONE to the correct strength.
  return [code, Blockly.JavaScript.ORDER_NONE];
}


Blockly.Blocks['x'] = {
  init: function() {
    this.appendDummyInput()
        .appendField("X");
    this.setOutput(true, null);
    this.setColour(230);
 this.setTooltip("");
 this.setHelpUrl("");
  }
};

Blockly.JavaScript['x'] = function(block) {
  // TODO: Assemble JavaScript into code variable.
  var code = `(this.x)`;
  // TODO: Change ORDER_NONE to the correct strength.
  return [code, Blockly.JavaScript.ORDER_NONE];
}

Blockly.Blocks['y'] = {
  init: function() {
    this.appendDummyInput()
        .appendField("Y");
    this.setOutput(true, null);
    this.setColour(230);
 this.setTooltip("");
 this.setHelpUrl("");
  }
};

Blockly.JavaScript['y'] = function(block) {
  // TODO: Assemble JavaScript into code variable.
  var code = `(this.y)`;
  // TODO: Change ORDER_NONE to the correct strength.
  return [code, Blockly.JavaScript.ORDER_NONE];
}


Blockly.Blocks['console_logger'] = {
  init: function() {
    this.appendValueInput("logString")
        .setCheck("String")
        .setAlign(Blockly.ALIGN_RIGHT)
        .appendField("thingtoLog");
    this.setColour(165);
 this.setTooltip("Log something to the console");
 this.setHelpUrl("");
  }
};

Blockly.JavaScript['console_logger'] = function(block) {
  const value_logstring = Blockly.JavaScript.valueToCode(block, 'logString', Blockly.JavaScript.ORDER_ATOMIC);
  // TODO: Assemble JavaScript into code variable.
  const code = `console.log(${value_logstring});`;
  return code;
}




Blockly.JavaScript['console_log_from_blockly'] = function(block) {
  const code = `
    console.log('from blockly');\n
    console.log(this.count);\n
    console.log(this.rocks);\n
  `;
  return code;
}

Blockly.Blocks['clear'] = {
  init: function() {
    this.appendValueInput("logString")
        .setCheck("String")
        .setAlign(Blockly.ALIGN_RIGHT)
        .appendField("clear");
    this.setPreviousStatement(true, null);
    this.setNextStatement(true, null);
    this.setColour(165);
 this.setTooltip("clear the screen");
 this.setHelpUrl("");
  }
};

Blockly.JavaScript['clear'] = function(block) {
  const code ='clearCanvas();\n';
  return code;
}


/***********************  Newish  ********************************/
Blockly.Blocks['addVolcano'] = {
  init: function() {
    this.appendDummyInput()
        .appendField("Create the volcano at");
    this.appendValueInput("x")
        .setCheck("Number")
        .setAlign(Blockly.ALIGN_RIGHT)
        .appendField("x");
    this.appendValueInput("y")
        .setCheck("Number")
        .setAlign(Blockly.ALIGN_RIGHT)
        .appendField("y");
    this.setInputsInline(true);
    this.setPreviousStatement(true, null);
    this.setNextStatement(true, null);
    this.setColour(230);
 this.setTooltip("");
 this.setHelpUrl("");
  }
};

Blockly.JavaScript['addVolcano'] = function(block) {
  var value_x = Blockly.JavaScript.valueToCode(block, 'x', Blockly.JavaScript.ORDER_ATOMIC);
  var value_y = Blockly.JavaScript.valueToCode(block, 'y', Blockly.JavaScript.ORDER_ATOMIC);
  // TODO: Assemble JavaScript into code variable.
  value_x = value_x || 10;
  value_y = value_y || 10;
  var code = `
    setVolcano({x: ${value_x}, y: ${value_y}});
  `
  console.log(code);
  return code;
}

/*******************************  Add Town: ***********************************/
Blockly.Blocks['addTown'] = {
  init: function() {
    this.appendValueInput("name")
        .setCheck("String")
        .setAlign(Blockly.ALIGN_RIGHT)
        .appendField("Create a town named");
    this.appendDummyInput()
        .appendField("at");
    this.appendValueInput("x")
        .setCheck("Number")
        .setAlign(Blockly.ALIGN_RIGHT)
        .appendField("x");
    this.appendValueInput("y")
        .setCheck("Number")
        .setAlign(Blockly.ALIGN_RIGHT)
        .appendField("y");
    this.setInputsInline(true);
    this.setPreviousStatement(true, null);
    this.setNextStatement(true, null);
    this.setColour(230);
 this.setTooltip("");
 this.setHelpUrl("");
  }
};

Blockly.JavaScript['addTown'] = function(block) {
  var value_name = Blockly.JavaScript.valueToCode(block, 'name', Blockly.JavaScript.ORDER_ATOMIC);
  var value_x = Blockly.JavaScript.valueToCode(block, 'x', Blockly.JavaScript.ORDER_ATOMIC);
  var value_y = Blockly.JavaScript.valueToCode(block, 'y', Blockly.JavaScript.ORDER_ATOMIC);
  // TODO: Assemble JavaScript into code variable.
  value_x = value_x || 1;
  value_y = value_y || 1;
  value_name = value_name || "'untitled'"
  var code = `
    addCity({x: ${value_x}, y: ${value_y}, name: ${value_name}});
  `
  return code;
}

/************************** Wind Direction: ***********************************/
Blockly.Blocks['setWindDirection'] = {
  init: function() {
    this.appendValueInput("windDirection")
        .setCheck("Number")
        .setAlign(Blockly.ALIGN_RIGHT)
        .appendField("Set wind direction");
    this.appendDummyInput()
        .appendField("degrees");
    this.setInputsInline(true);
    this.setPreviousStatement(true, null);
    this.setNextStatement(true, null);
    this.setColour(150);
 this.setTooltip("Compass direction,  0 == north 180 == south");
 this.setHelpUrl("Compass direction,  0 == north 180 == south");
  }
};

Blockly.JavaScript['setWindDirection'] = function(block) {
  var value_winddirection = Blockly.JavaScript.valueToCode(block, 'windDirection', Blockly.JavaScript.ORDER_ATOMIC);
  // TODO: Assemble JavaScript into code variable.
  var code = `
    setWinddirection(${value_winddirection});

  `;
  return code;
}

/************************** Wind Speed: ***********************************/
Blockly.Blocks['setWindSpeed'] = {
  init: function() {
    this.appendValueInput("windSpeed")
        .setCheck("Number")
        .setAlign(Blockly.ALIGN_RIGHT)
        .appendField("Set wind speed");
    this.appendDummyInput()
        .appendField("m/s");
    this.setInputsInline(true);
    this.setPreviousStatement(true, null);
    this.setNextStatement(true, null);
    this.setColour(150);
 this.setTooltip("wind speed, meters per second");
 this.setHelpUrl("wind speed, meters per second");
  }
};

Blockly.JavaScript['setWindSpeed'] = function(block) {
  var value_wind_speed = Blockly.JavaScript.valueToCode(block, 'windSpeed', Blockly.JavaScript.ORDER_ATOMIC);
  // TODO: Assemble JavaScript into code variable.
  var code = `
    setWindspeed(${value_wind_speed});

  `;
  return code;
}

/************************** set Eruption Height: ***********************************/
Blockly.Blocks['setEruptionHeight'] = {
  init: function() {
    this.appendValueInput("eruptionHeight")
        .setCheck("Number")
        .setAlign(Blockly.ALIGN_RIGHT)
        .appendField("Set eruption height");
    this.appendDummyInput()
        .appendField("km");
    this.setInputsInline(true);
    this.setPreviousStatement(true, null);
    this.setNextStatement(true, null);
    this.setColour(150);
 this.setTooltip("");
 this.setHelpUrl("");
  }
};

Blockly.JavaScript['setEruptionHeight'] = function(block) {
  var value_eruptionHeight = Blockly.JavaScript.valueToCode(block, 'eruptionHeight', Blockly.JavaScript.ORDER_ATOMIC);
  // TODO: Assemble JavaScript into code variable.
  var code = '//...;\n';
  return code;
}

/************************** set Eruption Mass: ***********************************/
Blockly.Blocks['setEruptionMass'] = {
  init: function() {
    this.appendValueInput("eruptionMass")
        .setCheck("Number")
        .setAlign(Blockly.ALIGN_RIGHT)
        .appendField("Set eruption mass");
    this.appendDummyInput()
        .appendField("kg");
    this.setInputsInline(true);
    this.setPreviousStatement(true, null);
    this.setNextStatement(true, null);
    this.setColour(150);
 this.setTooltip("");
 this.setHelpUrl("");
  }
};

Blockly.JavaScript['setEruptionMass'] = function(block) {
  var value_mass = Blockly.JavaScript.valueToCode(block, 'eruptionMass', Blockly.JavaScript.ORDER_ATOMIC);
  // TODO: Assemble JavaScript into code variable.
  var code = `
    setMass(${value_mass});
  `;
  return code;
}

/************************** VEI: ***********************************/
Blockly.Blocks['setVEI'] = {
  init: function() {
    this.appendValueInput("vei")
        .setCheck("Number")
        .setAlign(Blockly.ALIGN_RIGHT)
        .appendField("Set VEI (0-8)");
    this.appendDummyInput();
    this.setInputsInline(true);
    this.setPreviousStatement(true, null);
    this.setNextStatement(true, null);
    this.setColour(150);
    this.setTooltip("Volcanic Explosivity Index");
    this.setHelpUrl("Volcanic Explosivity Index");
  }
};

Blockly.JavaScript['setVEI'] = function(block) {
  var value_vei = Blockly.JavaScript.valueToCode(block, 'vei', Blockly.JavaScript.ORDER_ATOMIC);
  // TODO: Assemble JavaScript into code variable.
  var code = `
    setVEI(${value_vei});

  `;
  return code;
}

/************************** Erupt : ***********************************/
Blockly.Blocks['erupt'] = {
  init: function() {
    this.appendDummyInput()
        .appendField("Erupt with current values");
    this.appendDummyInput()
        .setAlign(Blockly.ALIGN_RIGHT)
        .appendField(new Blockly.FieldCheckbox("TRUE"), "animate")
        .appendField("Show animation");
    this.setInputsInline(false);
    this.setPreviousStatement(true, null);
    this.setNextStatement(true, null);
    this.setColour(330);
 this.setTooltip("have the volcano erupt");
 this.setHelpUrl("have the volcano erupt");
  }
};

Blockly.JavaScript['erupt'] = function(block) {
  var animate = block.getFieldValue('animate') == 'TRUE';
  var code = `
    erupt(${animate});
  `;
  return code;
}

/************************** results: ***********************************/

Blockly.Blocks['outputPaintGrid'] = {
  init: function() {
    this.appendDummyInput()
        .appendField("Color the grid")
        .appendField(new Blockly.FieldColour("#ff0000"), "COLOR")
        .appendField("by")
        .appendField(new Blockly.FieldDropdown([["tephra thickness", "thickness"]]), "result_type");
    this.setPreviousStatement(true, null);
    this.setNextStatement(true, null);
    this.setColour(230);
 this.setTooltip("Color the results of the simulation in the grid with a color");
 this.setHelpUrl("");
  }
};

Blockly.JavaScript['outputPaintGrid'] = function(block) {
  var resultType = block.getFieldValue('result_type');
  var color = block.getFieldValue('COLOR');
  // TODO: Assemble JavaScript into code variable.
  var code = `
    paintGrid({resultType: "${resultType}", color: "${color}"});
  `;
  return code;
}

/************************** reDraw: ***********************************/

Blockly.Blocks['redrawMap'] = {
  init: function() {
    this.appendDummyInput()
        .appendField("Redraw the map");
    this.setInputsInline(true);
    this.setPreviousStatement(true, null);
    this.setNextStatement(true, null);
    this.setColour(75);
 this.setTooltip("have the volcano erupt");
 this.setHelpUrl("have the volcano erupt");
  }
};

Blockly.JavaScript['redrawMap'] = function(block) {
  // TODO: Assemble JavaScript into code variable.
  var code = '//...;\n';
  return code;
}